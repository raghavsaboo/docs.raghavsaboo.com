{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello","title":"Home"},{"location":"Non-Technical/Areas%20of%20Interest/","text":"Story Telling Writing Spoken Delivery Psychology Business","title":"Areas of Interest"},{"location":"Non-Technical/Business/Books/The%20Personal%20MBA%20by%20Josh%20Kaufman/","text":"The Personal MBA by Rory Sutherland Link: The Personal MBA Value Creation The key to value creation is to link a repeatable process that combines Value Creation - actually discovering and building something that people want Marketing - driving attention to it Sales - convert interest into paying customers Value Delivery - ensure customers are satisfied with what you promised Finance - sustain the process throug profit with the needs of the market which can fall into one of the following human drives The Drive to Acquire The Drive to Bond The Drive to Learn The Drive to Defend The Drive to Feel","title":"The Personal MBA by Rory Sutherland"},{"location":"Non-Technical/Business/Books/The%20Personal%20MBA%20by%20Josh%20Kaufman/#the-personal-mba-by-rory-sutherland","text":"Link: The Personal MBA","title":"The Personal MBA by Rory Sutherland"},{"location":"Non-Technical/Business/Books/The%20Personal%20MBA%20by%20Josh%20Kaufman/#value-creation","text":"The key to value creation is to link a repeatable process that combines Value Creation - actually discovering and building something that people want Marketing - driving attention to it Sales - convert interest into paying customers Value Delivery - ensure customers are satisfied with what you promised Finance - sustain the process throug profit with the needs of the market which can fall into one of the following human drives The Drive to Acquire The Drive to Bond The Drive to Learn The Drive to Defend The Drive to Feel","title":"Value Creation"},{"location":"Non-Technical/Psychology/Books/Alchemy%3A%20The%20Dark%20Art%20and%20Curious%20Science%20of%20Creating%20Magin%20in%20Brands%2C%20Business%2C%20and%20Life/","text":"Alchemy by Rory Sutherland Link: Good Reads Overview The main premise of the book is that while science and logic has resulted in immensely valuable products, there is a treasure trove still waiting to be discovered by applying apparently illogical solutions to human problems. Just because the scientific methodology has been so reliable it does not have to be the only tool to apply especially to a messy field like human behaviour. \"Engineering does not allow for magic. Psychology does.\" Rory defines the way humans make decisions as \"psycho-logic\" - to distinguish it from the concepts of \"logic\" and \"rationality\" The idea is to become adept at spotting instances where the \"universal laws\" don't apply - when abandoning logic is sensible A 4x4 matrix that can be plotted of human advances / ideas that fall on a spectrum between FAILS to WORKS and SEEMS WEIRD to MAKES SENSE. e.g. Bicycles definitely work but are at the same time very weird - humans have learned how to ride bicycles but it is not built in a \"logical\" manner. Signalling Subconcious Hacking Satisficing Psychophysics","title":"Alchemy by Rory Sutherland"},{"location":"Non-Technical/Psychology/Books/Alchemy%3A%20The%20Dark%20Art%20and%20Curious%20Science%20of%20Creating%20Magin%20in%20Brands%2C%20Business%2C%20and%20Life/#alchemy-by-rory-sutherland","text":"Link: Good Reads","title":"Alchemy by Rory Sutherland"},{"location":"Non-Technical/Psychology/Books/Alchemy%3A%20The%20Dark%20Art%20and%20Curious%20Science%20of%20Creating%20Magin%20in%20Brands%2C%20Business%2C%20and%20Life/#overview","text":"The main premise of the book is that while science and logic has resulted in immensely valuable products, there is a treasure trove still waiting to be discovered by applying apparently illogical solutions to human problems. Just because the scientific methodology has been so reliable it does not have to be the only tool to apply especially to a messy field like human behaviour. \"Engineering does not allow for magic. Psychology does.\" Rory defines the way humans make decisions as \"psycho-logic\" - to distinguish it from the concepts of \"logic\" and \"rationality\" The idea is to become adept at spotting instances where the \"universal laws\" don't apply - when abandoning logic is sensible A 4x4 matrix that can be plotted of human advances / ideas that fall on a spectrum between FAILS to WORKS and SEEMS WEIRD to MAKES SENSE. e.g. Bicycles definitely work but are at the same time very weird - humans have learned how to ride bicycles but it is not built in a \"logical\" manner.","title":"Overview"},{"location":"Non-Technical/Psychology/Books/Alchemy%3A%20The%20Dark%20Art%20and%20Curious%20Science%20of%20Creating%20Magin%20in%20Brands%2C%20Business%2C%20and%20Life/#signalling","text":"","title":"Signalling"},{"location":"Non-Technical/Psychology/Books/Alchemy%3A%20The%20Dark%20Art%20and%20Curious%20Science%20of%20Creating%20Magin%20in%20Brands%2C%20Business%2C%20and%20Life/#subconcious-hacking","text":"","title":"Subconcious Hacking"},{"location":"Non-Technical/Psychology/Books/Alchemy%3A%20The%20Dark%20Art%20and%20Curious%20Science%20of%20Creating%20Magin%20in%20Brands%2C%20Business%2C%20and%20Life/#satisficing","text":"","title":"Satisficing"},{"location":"Non-Technical/Psychology/Books/Alchemy%3A%20The%20Dark%20Art%20and%20Curious%20Science%20of%20Creating%20Magin%20in%20Brands%2C%20Business%2C%20and%20Life/#psychophysics","text":"","title":"Psychophysics"},{"location":"Non-Technical/Story%20Telling/Books/Storyworthy%20by%20Matthew%20Dicks/","text":"Storyworthy by Matthew Dicks Link: Matthew Dicks Official Site How to Brainstorm Story Ideas Homework for Life Spend 5 minutes each day to write 2-3 sentences - not the entire story - of moments from the day Don't worry of connecting threads of stories from previous days Crash & Burn Spend 10 minutes to allow yourself to write your stream of conciousness/thoughts Don't let your pen from stopping - let new ideas keep crashing in without hesitation or judgement Be willing to leave a good idea behind in favour of a new one - even if the new idea is bad First, Best, Last, Worst A story against each of these prompts e.g. First/Best/Last/Worst Car Annotate any as potential story or anecdote But not all listed will be story worthy","title":"Storyworthy by Matthew Dicks"},{"location":"Non-Technical/Story%20Telling/Books/Storyworthy%20by%20Matthew%20Dicks/#storyworthy-by-matthew-dicks","text":"Link: Matthew Dicks Official Site","title":"Storyworthy by Matthew Dicks"},{"location":"Non-Technical/Story%20Telling/Books/Storyworthy%20by%20Matthew%20Dicks/#how-to-brainstorm-story-ideas","text":"","title":"How to Brainstorm Story Ideas"},{"location":"Non-Technical/Story%20Telling/Books/Storyworthy%20by%20Matthew%20Dicks/#homework-for-life","text":"Spend 5 minutes each day to write 2-3 sentences - not the entire story - of moments from the day Don't worry of connecting threads of stories from previous days","title":"Homework for Life"},{"location":"Non-Technical/Story%20Telling/Books/Storyworthy%20by%20Matthew%20Dicks/#crash-burn","text":"Spend 10 minutes to allow yourself to write your stream of conciousness/thoughts Don't let your pen from stopping - let new ideas keep crashing in without hesitation or judgement Be willing to leave a good idea behind in favour of a new one - even if the new idea is bad","title":"Crash &amp; Burn"},{"location":"Non-Technical/Story%20Telling/Books/Storyworthy%20by%20Matthew%20Dicks/#first-best-last-worst","text":"A story against each of these prompts e.g. First/Best/Last/Worst Car Annotate any as potential story or anecdote But not all listed will be story worthy","title":"First, Best, Last, Worst"},{"location":"Technical/Areas%20of%20Interest/","text":"Algorithms Data Structures Statistics Linear Algebra Calculus Machine Learning Distributed Systems Design","title":"Areas of Interest"},{"location":"Technical/Distributed%20Systems%20Design/Compressed%20Notes/","text":"","title":"Compressed Notes"},{"location":"Technical/Distributed%20Systems%20Design/Data%20Models/","text":"Overview Data Modeling (how data is stored) and Data Querying (how data is retrieved) choices go hand in hand. Data Abstractions Main Categories of Databases 1. Relational Database When you have a relatively fixed structure and you know this structure is not going to change too rapidly. Optimized for Transaction and Batch Processing (Read Throughput), Joins etc. Data Organized as tables/relations Object Relational Mapping Needed Oracle, MySQL, PostgreSQL 2. Document Database Target use cases are where data comes in self-constrained documents and relationships between one document and another are rare. Also the schema is easily evolved. NoSQL - or not only SQL Flexible schemas, better performance due to locality / high write throughput Mainly free and open source MongoDB, CouchDB, Espresso 3. Graph Database Target use cases are where anything is potentially related to everything. Best suited for highly interconnected data - many to many relationships Social graphs, web graphs etc. Neo4j, SPARQL, Cypher","title":"Data Models"},{"location":"Technical/Distributed%20Systems%20Design/Data%20Models/#overview","text":"Data Modeling (how data is stored) and Data Querying (how data is retrieved) choices go hand in hand.","title":"Overview"},{"location":"Technical/Distributed%20Systems%20Design/Data%20Models/#data-abstractions","text":"","title":"Data Abstractions"},{"location":"Technical/Distributed%20Systems%20Design/Data%20Models/#main-categories-of-databases","text":"","title":"Main Categories of Databases"},{"location":"Technical/Distributed%20Systems%20Design/Data%20Models/#1-relational-database","text":"When you have a relatively fixed structure and you know this structure is not going to change too rapidly. Optimized for Transaction and Batch Processing (Read Throughput), Joins etc. Data Organized as tables/relations Object Relational Mapping Needed Oracle, MySQL, PostgreSQL","title":"1. Relational Database"},{"location":"Technical/Distributed%20Systems%20Design/Data%20Models/#2-document-database","text":"Target use cases are where data comes in self-constrained documents and relationships between one document and another are rare. Also the schema is easily evolved. NoSQL - or not only SQL Flexible schemas, better performance due to locality / high write throughput Mainly free and open source MongoDB, CouchDB, Espresso","title":"2. Document Database"},{"location":"Technical/Distributed%20Systems%20Design/Data%20Models/#3-graph-database","text":"Target use cases are where anything is potentially related to everything. Best suited for highly interconnected data - many to many relationships Social graphs, web graphs etc. Neo4j, SPARQL, Cypher","title":"3. Graph Database"},{"location":"Technical/Distributed%20Systems%20Design/Overview/","text":"Overview Data intensive applications are one where: the amount of data that is generated/uses increases quickly OR the complexity of data generated/used increases quickly OR the speed of change in data increases quickly Key Components of Modern Data Intensive Applications Database - source of truth for any consumer. Cache - for temporarily storing an expensive operation to speed up reads Full-text index - for quickly seasrching data by keyword or filter Message queues - for message passing between processes. Stream processing - near/realtime processing of data Batch processing - crunching large amounts of collected data Application code - logic and connective tissue between the components above Key Requirements for Data Intensive Applications Reliability Fault tolerance No un-authorized access Chaos testing Full machine failures Bugs - Automating tests Staging/Testing environment Quickly roll-back Scalability Handle higher traffic volume Meeting traffic load with peak number of reads, writes and simultaneous users Capacity planning Response time vs throughput End user response = server response time + network response time 90 th , 95 th Percentile Service Level Objectives (SLOs) / Service Level Agreements (SLAs) Scaling up (more powerful machine) out (distributed over many smaller machines) Maintainability Add new people to work Productivity Operable: Configurable and testable Simple: Easy to understand and ramp up Evolveable: East to change","title":"Overview"},{"location":"Technical/Distributed%20Systems%20Design/Overview/#overview","text":"Data intensive applications are one where: the amount of data that is generated/uses increases quickly OR the complexity of data generated/used increases quickly OR the speed of change in data increases quickly","title":"Overview"},{"location":"Technical/Distributed%20Systems%20Design/Overview/#key-components-of-modern-data-intensive-applications","text":"Database - source of truth for any consumer. Cache - for temporarily storing an expensive operation to speed up reads Full-text index - for quickly seasrching data by keyword or filter Message queues - for message passing between processes. Stream processing - near/realtime processing of data Batch processing - crunching large amounts of collected data Application code - logic and connective tissue between the components above","title":"Key Components of Modern Data Intensive Applications"},{"location":"Technical/Distributed%20Systems%20Design/Overview/#key-requirements-for-data-intensive-applications","text":"","title":"Key Requirements for Data Intensive Applications"},{"location":"Technical/Distributed%20Systems%20Design/Overview/#reliability","text":"Fault tolerance No un-authorized access Chaos testing Full machine failures Bugs - Automating tests Staging/Testing environment Quickly roll-back","title":"Reliability"},{"location":"Technical/Distributed%20Systems%20Design/Overview/#scalability","text":"Handle higher traffic volume Meeting traffic load with peak number of reads, writes and simultaneous users Capacity planning Response time vs throughput End user response = server response time + network response time 90 th , 95 th Percentile Service Level Objectives (SLOs) / Service Level Agreements (SLAs) Scaling up (more powerful machine) out (distributed over many smaller machines)","title":"Scalability"},{"location":"Technical/Distributed%20Systems%20Design/Overview/#maintainability","text":"Add new people to work Productivity Operable: Configurable and testable Simple: Easy to understand and ramp up Evolveable: East to change","title":"Maintainability"},{"location":"Technical/Distributed%20Systems%20Design/Partitioning/","text":"Overview Horizontally scaling and scalability (data, users, and machines) is the key theme of partitioning. Partitioning == Splitting == Sharding Key Issues to Look Out For Hot spots / Skews Key Hash Based Partition Rebalancing strategies Routing Logic Placement","title":"Partitioning"},{"location":"Technical/Distributed%20Systems%20Design/Partitioning/#overview","text":"Horizontally scaling and scalability (data, users, and machines) is the key theme of partitioning. Partitioning == Splitting == Sharding","title":"Overview"},{"location":"Technical/Distributed%20Systems%20Design/Partitioning/#key-issues-to-look-out-for","text":"Hot spots / Skews Key Hash Based Partition Rebalancing strategies Routing Logic Placement","title":"Key Issues to Look Out For"},{"location":"Technical/Distributed%20Systems%20Design/Partitioning/#_1","text":"","title":""},{"location":"Technical/Distributed%20Systems%20Design/Replication/","text":"Overview The process of syncing data between databases in a consistent way is refered to as \"replication\". This is needed due to a few reasons: * Resilience of service to Machine Failures * Improving latency for global audience * Scaling to millions of users * Offline/Network failures Types of Replication 1. Single Leader 2. Multi-Leader 3. Leaderless","title":"Replication"},{"location":"Technical/Distributed%20Systems%20Design/Replication/#overview","text":"The process of syncing data between databases in a consistent way is refered to as \"replication\". This is needed due to a few reasons: * Resilience of service to Machine Failures * Improving latency for global audience * Scaling to millions of users * Offline/Network failures","title":"Overview"},{"location":"Technical/Distributed%20Systems%20Design/Replication/#types-of-replication","text":"","title":"Types of Replication"},{"location":"Technical/Distributed%20Systems%20Design/Replication/#1-single-leader","text":"","title":"1. Single Leader"},{"location":"Technical/Distributed%20Systems%20Design/Replication/#2-multi-leader","text":"","title":"2. Multi-Leader"},{"location":"Technical/Distributed%20Systems%20Design/Replication/#3-leaderless","text":"","title":"3. Leaderless"},{"location":"Technical/Distributed%20Systems%20Design/Storage%20and%20Retrieval/","text":"Which Database to Use? Every storage engine is optimized for different use cases. Select the right storage engine for your use case As an application developer we need to have a rough idea on what the storage engine is doing under the hood Tuning and optimizing pointers Categories of Databases There are two main categories of databases - OLTP (Online Transaction Processing Database) and OLAP (Online Analytical Processing Database) each with a different read pattern, write patterns, user using it, data size etc. OLTP - Online Transaction Processing Database optimized for latency. eg. MySQL Usually row-order store easy to modify/add a record might read in unnecessary data OLAP - Online Analytical Processing Databases optimized for data crunching. Data Warehousing (Star/Snowflake schema), column oriented Column compression, data cubes, optimized for reads/queries Materialized views, lack of flexibility HBase, Hive, Spark Usually column-order store Only need to read in relevant data Tuple writes require multiple acesses Suitable for read-mostly, read-intensive, large data repositories Database Index An index is an additional structure that is derived from the primary data. A well chosen index optimizes for reads but slows down the write. Simple database index is a Hash based Index. Some issues for an index: File format (encoding) Deleting records Crash recovery Partially written records Concurrency control Range queries? Types of Storage Engines Two families of storage engines used by databases: Log structured - LSM-Trees e.g. SSTables -> HBASE, Cassandra Page-Oriented - B-trees -> RDBMS These are answers to limitations of disk access. LSM-Trees (Log Sort Merge) and SSTables (Sort String Tables) SSTables - in-memory mem table backend by Disk SSTable file, sorted by keys. e.g. Red-Black tree or AVL trees. Supports high write throughput. Lucene - full-text search is much more complex than key-value index like SSTables. However, it does internally use SSTables for term dictionary. Bloom filters - memory efficient data structure used for approximating the contents of a set. It can tell you if a key does not appear in the database, thus saves many unnecessary disk reads for non-existent keys. Compaction is a background process of the means of throwing away duplicate keys in the log and keeping only the most recent update for each key. B-Trees Index Most widely used indexing structure is B-Trees. One place per key! They are the standard implementation in RDBMS and NoSQL stores today. It also keeps key-value sorted by keys which allows quick lookups. B-Trees are designed and optimized for the hardward as disks are arranged in fixed sized blocks, B-Trees also break down the data into fixed size 4KB blocks. There is a root node and a branching factor (references to child pages) 4 level tree with 4KB pages with branching factor of 500 can store up to 256TB! B-Tree is optimized for reads! Write ahead log is used for crash recovery, latches for concurrency. Sibling references in child node allows for easier scannig of sequential keys. Other Indexing Concepts Clustered index - inline storing of row values Secondary index - helps with joins Covering index - few columns are included Multi-column index - multiple keys concatenated Full-text search and fuzzy indexes help with spelling mistakes (edit distances), grammar, synonyms, words near each other, linguistics etc. In Memory Stores - Redis, Memcaches etc.","title":"Storage and Retrieval"},{"location":"Technical/Distributed%20Systems%20Design/Storage%20and%20Retrieval/#which-database-to-use","text":"Every storage engine is optimized for different use cases. Select the right storage engine for your use case As an application developer we need to have a rough idea on what the storage engine is doing under the hood Tuning and optimizing pointers","title":"Which Database to Use?"},{"location":"Technical/Distributed%20Systems%20Design/Storage%20and%20Retrieval/#categories-of-databases","text":"There are two main categories of databases - OLTP (Online Transaction Processing Database) and OLAP (Online Analytical Processing Database) each with a different read pattern, write patterns, user using it, data size etc. OLTP - Online Transaction Processing Database optimized for latency. eg. MySQL Usually row-order store easy to modify/add a record might read in unnecessary data OLAP - Online Analytical Processing Databases optimized for data crunching. Data Warehousing (Star/Snowflake schema), column oriented Column compression, data cubes, optimized for reads/queries Materialized views, lack of flexibility HBase, Hive, Spark Usually column-order store Only need to read in relevant data Tuple writes require multiple acesses Suitable for read-mostly, read-intensive, large data repositories","title":"Categories of Databases"},{"location":"Technical/Distributed%20Systems%20Design/Storage%20and%20Retrieval/#database-index","text":"An index is an additional structure that is derived from the primary data. A well chosen index optimizes for reads but slows down the write. Simple database index is a Hash based Index. Some issues for an index: File format (encoding) Deleting records Crash recovery Partially written records Concurrency control Range queries?","title":"Database Index"},{"location":"Technical/Distributed%20Systems%20Design/Storage%20and%20Retrieval/#types-of-storage-engines","text":"Two families of storage engines used by databases: Log structured - LSM-Trees e.g. SSTables -> HBASE, Cassandra Page-Oriented - B-trees -> RDBMS These are answers to limitations of disk access.","title":"Types of Storage Engines"},{"location":"Technical/Distributed%20Systems%20Design/Storage%20and%20Retrieval/#lsm-trees-log-sort-merge-and-sstables-sort-string-tables","text":"SSTables - in-memory mem table backend by Disk SSTable file, sorted by keys. e.g. Red-Black tree or AVL trees. Supports high write throughput. Lucene - full-text search is much more complex than key-value index like SSTables. However, it does internally use SSTables for term dictionary. Bloom filters - memory efficient data structure used for approximating the contents of a set. It can tell you if a key does not appear in the database, thus saves many unnecessary disk reads for non-existent keys. Compaction is a background process of the means of throwing away duplicate keys in the log and keeping only the most recent update for each key.","title":"LSM-Trees (Log Sort Merge) and SSTables (Sort String Tables)"},{"location":"Technical/Distributed%20Systems%20Design/Storage%20and%20Retrieval/#b-trees-index","text":"Most widely used indexing structure is B-Trees. One place per key! They are the standard implementation in RDBMS and NoSQL stores today. It also keeps key-value sorted by keys which allows quick lookups. B-Trees are designed and optimized for the hardward as disks are arranged in fixed sized blocks, B-Trees also break down the data into fixed size 4KB blocks. There is a root node and a branching factor (references to child pages) 4 level tree with 4KB pages with branching factor of 500 can store up to 256TB! B-Tree is optimized for reads! Write ahead log is used for crash recovery, latches for concurrency. Sibling references in child node allows for easier scannig of sequential keys.","title":"B-Trees Index"},{"location":"Technical/Distributed%20Systems%20Design/Storage%20and%20Retrieval/#other-indexing-concepts","text":"Clustered index - inline storing of row values Secondary index - helps with joins Covering index - few columns are included Multi-column index - multiple keys concatenated Full-text search and fuzzy indexes help with spelling mistakes (edit distances), grammar, synonyms, words near each other, linguistics etc. In Memory Stores - Redis, Memcaches etc.","title":"Other Indexing Concepts"},{"location":"Technical/Experimentation/Outline/","text":"Outline of Experimentation Topics Causal Inference - Bayesian vs. Frequentist Basic Probability and Stats - False Positives and False Negatives - P-Values - Power - Confidence Interval - CTR Variance Designing Experiments - Why experiment? - Landscape - Product Development Cycle - Measuring Impact - What does the data look like - How to randomize - What could go wrong - What to measure - How to measure - Compare - Design and Monitor - Interpret and Recommend Action - A/A Test Overall Evaluation Criteria (OEC) Multiple Testing - False Positives and Multiple Testing - Omnibus test Tiered Metrics Central Limit Theorem and Handling Violated Assumptions - When not to A/B Test - What to do when you cannot A/B test - How to check assumptions - Bootstrap and Delta Method - One-sided and Two Sided tests - High Skew Remedies - Small Samples - Data Quality Checks Sequential Tests & Variance Reduction - Peeking and Sequential Testing - Getting Results Faster - Variance Reduction - CUPED (vs Normal AB) and Crossover - Fast Surrogates - Pre-experiment Imbalance Multi-armed Bandits - vs. AB - vs. Contextual Bandits Marketplace and Network Effects","title":"Outline of Experimentation Topics"},{"location":"Technical/Experimentation/Outline/#outline-of-experimentation-topics","text":"Causal Inference - Bayesian vs. Frequentist Basic Probability and Stats - False Positives and False Negatives - P-Values - Power - Confidence Interval - CTR Variance Designing Experiments - Why experiment? - Landscape - Product Development Cycle - Measuring Impact - What does the data look like - How to randomize - What could go wrong - What to measure - How to measure - Compare - Design and Monitor - Interpret and Recommend Action - A/A Test Overall Evaluation Criteria (OEC) Multiple Testing - False Positives and Multiple Testing - Omnibus test Tiered Metrics Central Limit Theorem and Handling Violated Assumptions - When not to A/B Test - What to do when you cannot A/B test - How to check assumptions - Bootstrap and Delta Method - One-sided and Two Sided tests - High Skew Remedies - Small Samples - Data Quality Checks Sequential Tests & Variance Reduction - Peeking and Sequential Testing - Getting Results Faster - Variance Reduction - CUPED (vs Normal AB) and Crossover - Fast Surrogates - Pre-experiment Imbalance Multi-armed Bandits - vs. AB - vs. Contextual Bandits Marketplace and Network Effects","title":"Outline of Experimentation Topics"}]}